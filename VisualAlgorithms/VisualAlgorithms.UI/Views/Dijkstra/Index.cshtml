@{
    ViewBag.Title = "Dijkstra Algorithm";
}

<h2>Dijkstra Algorithm"</h2>

<div class="row">

    <div class="col-md-3">
        <ul class="nav nav-tabs">
            <li class="active"><a data-target="#pseudo" data-toggle="tab">@ResManager.GetResource("Pseudo")</a></li>
            <li><a data-target="#csharp" data-toggle="tab">@ResManager.GetResource("CSharp")</a></li>
        </ul>

        <div class="tab-content">
            <div class="tab-pane active" id="pseudo">
                <pre style="overflow: auto; max-height:39.5em; min-height:39.5em;">
<code class="line-numbers language-markup">
DIJKSTRA(G, w, s)
    INITIALIZE-SINGLE-SOURCE(G, s)
    S = ∅
    Q = G.V
    while Q != ∅
        u = EXTRACT-MIN(Q)
        S = S ∪ {u}
        for each vertex v ∈ G.Adj[u]
            RELAX(u, v, w)
</code>
                </pre>
            </div>
            <div class="tab-pane" id="csharp">
                <pre style="overflow: auto; max-height:39.5em; min-height:39.5em;">
<code class="line-numbers language-csharp">
public class Dijkstra
{
    public Graph&lt;string&gt; graph { get; set; }
    private double[] dist;
    private int?[] prev;
    public Dijkstra(Graph&lt;string&gt; graph)
    {
        this.graph = graph;
        dist = new double[graph.CountNodes()];
        prev = new int?[graph.CountNodes()];
    }
    public void doDijkstra(int start)
    {
        IPriorityQueue&lt;Node&lt;string&gt;&gt; queue = new SimplePriorityQueue&lt;Node&lt;string&gt;&gt;();

        for (int i = 0; i < graph.CountNodes(); i++)
        {
            dist[i] = double.MaxValue;
        }

        dist[start] = 0;
        var startNode = graph.GetNode(start);
        queue.Enqueue(startNode,dist[start]);

        while (queue.Count != 0)
        {
            var u = queue.Dequeue();
            foreach (var edge in u.EdgeList)
            {
                var alt = dist[u.Id] + edge.Weight;
                if (alt < dist[edge.DestinationId])
                {
                    var neigbour = graph.GetNode(edge.DestinationId);

                    dist[edge.DestinationId] = alt;
                    prev[edge.DestinationId] = u.Id;

                    queue.Enqueue(neigbour,alt);
                }
            }
        }
    }
}
</code>
                </pre>
            </div>
        </div>
    </div>
    <div class="col-md-9 cyContainer">
        <div class="row">
            <div id="cy" class="cyGraph">

            </div>
        </div>
        <div class="row">
            <div class="col-md-1">
                <h1>@ResManager.GetResource("Head")</h1>
            </div>
            <div class="col-md-10">
                <div id="cy" class="cyQueue" style="height: 100px;">
                </div>
            </div>
            <div class="col-md-1">
                <h1>@ResManager.GetResource("Tail")</h1>
            </div>
        </div>
    </div>

</div>
<br />
<div class="row">
    <div class="col-md-offset-3 col-md-9">
        @Html.Partial("_Player")
    </div>

</div>


@section scripts{
    <script src="~/Scripts/PageScripts/Dijkstra.js"></script>
}