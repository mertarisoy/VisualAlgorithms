@{
    ViewBag.Title = "BFS Algorithm";
}

<h2>DFS</h2>

<div class="row">

    <div class="col-md-3">
        <ul class="nav nav-tabs">
            <li class="active"><a data-target="#pseudo" data-toggle="tab">@ResManager.GetResource("Pseudo")</a></li>
            <li><a data-target="#csharp" data-toggle="tab">@ResManager.GetResource("CSharp")</a></li>
        </ul>

        <div class="tab-content">
            <div class="tab-pane active" id="pseudo">
                <pre style="overflow: auto; max-height:44em; min-height:44em;">
<code class="line-numbers language-markup">
Breadth-First-Search(Graph, root):
for each node n in Graph:            
    n.distance = INFINITY        
    n.parent = NIL
 
create empty queue Q      
 
root.distance = 0
Q.enqueue(root)                      
 
while Q is not empty:        
     
    current = Q.dequeue()
     
    for each node n that is adjacent to current:
        if n.distance == INFINITY:
            n.distance = current.distance + 1
            n.parent = current
            Q.enqueue(n)
</code>
                </pre>
            </div>
            <div class="tab-pane" id="csharp">
                <pre style="overflow: auto; max-height:44em; min-height:44em;">
<code class="line-numbers language-csharp" >
public class BreathFirstSearch
{
    private Graph&lt;string&gt; graph;
    private bool[] visited;
    public BreathFirstSearch(Graph&lt;string&gt; graph)
    {
        this.graph = graph;
        this.visited = new bool[graph.CountNodes()];
    }
    public void doBFS(int start)
    {
        Queue&lt;int&gt; queue = new Queue&lt;int&gt;(graph.CountNodes());
        Queue&lt;string&gt; queueEdge = new Queue&lt;string&gt;(graph.CountNodes());
        queue.Enqueue(start);
        visited[start] = true;
        while (queue.Any())
        {
            var v = queue.Dequeue();         
            var neigbours = graph.GetNode(v).EdgeList;
            foreach (var neigbour in neigbours)
            {
                if (!visited[neigbour.DestinationId])
                {
                    visited[neigbour.DestinationId] = true;
                    queueEdge.Enqueue(neigbour.Id);                  
                    queue.Enqueue(neigbour.DestinationId);
                }
            }
        }
    }
}
</code>
                </pre>
            </div>
        </div>
    </div>
    <div class="col-md-9 cyContainer">
        <div class="row">
            <div id="cy" class="cyGraph">

            </div>
        </div>
        <div class="row">
            <div class="col-md-1">
                <h1>@ResManager.GetResource("Head")</h1>
            </div>
            <div class="col-md-10">
                <h2 style="text-align: center; display: block; opacity: 0.3;">@ResManager.GetResource("Queue")</h2>
                <div id="cy" class="cyQueue">
                </div>
            </div>
            <div class="col-md-1">
                <h1>@ResManager.GetResource("Tail")</h1>
            </div>
        </div>
    </div>

</div>
<br />
<div class="row">
    <div class="col-md-offset-3 col-md-9">
        @Html.Partial("_Player")
    </div>

</div>
<div class="row">
    <div class="col-md-3">
        <div class="panel panel-primary">
            <div class="panel-heading" style="max-height:50px;">
                <h3 style="margin-top: 0;">@ResManager.GetResource("ApplicationAreas")</h3>
            </div>
            <div class="panel-body">
                @ResManager.GetResource("BfsApplicationAreas")
            </div>
        </div>
    </div>
    <div class="col-md-9">
        <div class="panel panel-primary">
            <div class="panel-heading" style="max-height: 50px;">
                <h3 style="margin-top: 0;">@ResManager.GetResource("Description")</h3>
            </div>
            <div class="panel-body">
                
@ResManager.GetResource("BfsDescription")
               
            </div>
        </div>
    </div>
</div>


@section scripts{
    <script src="~/Scripts/PageScripts/BFS.js"></script>
}