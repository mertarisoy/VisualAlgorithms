@{
    ViewBag.Title = "Tarjan's DFS";
}

<h2>Tarjan's DFS</h2>

<div class="row">

    <div class="col-md-3">
        <ul class="nav nav-tabs">
            <li class="active"><a data-target="#pseudo" data-toggle="tab">@ResManager.GetResource("Pseudo")</a></li>
            <li><a data-target="#csharp" data-toggle="tab">@ResManager.GetResource("CSharp")</a></li>
        </ul>

        <div class="tab-content">
            <div class="tab-pane active" id="pseudo">
                <pre style="overflow: auto; max-height:39.5em; min-height:39.5em;">
<code class="line-numbers language-markup">
DIJKSTRA(G, w, s)
    INITIALIZE-SINGLE-SOURCE(G, s)
    S = ∅
    Q = G.V
    while Q != ∅
        u = EXTRACT-MIN(Q)
        S = S ∪ {u}
        for each vertex v ∈ G.Adj[u]
            RELAX(u, v, w)
</code>
                </pre>
            </div>
            <div class="tab-pane" id="csharp">
                <pre style="overflow: auto; max-height:39.5em; min-height:39.5em;"> 
<code class="line-numbers language-csharp">
public class TarjanDFS
{
    private Graph&lt;string&gt; graph;
    private List&lt;List&lt;Node&lt;string&gt;&gt;&gt; SSCs;
    private bool[] visited;
    private int[] low;
    private int?[] time;
    private bool[] onStack;
    private Stack&lt;int&gt; stack;

    private int index = 0;

    public TarjanDFS (Graph&lt;string&gt; graph)
    {
        this.graph = graph;
        this.SSCs = new List&lt;List&lt;Node&lt;string&gt;&gt;&gt;(graph.CountNodes());
        this.visited = new bool[graph.CountNodes()];
        this.low = new int[graph.CountNodes()];
        this.time = new int?[graph.CountNodes()];
        this.onStack = new bool[graph.CountNodes()];
        this.stack = new Stack&lt;int&gt;(graph.CountNodes());
    }

    public void doDFS()
    {
        foreach (var node in graph.getNodeList())
        {
            if (time[node.Id] == null)
            {
                StrongConnect(node.Id);
            }
        }

        return animationList;
    }

    private void StrongConnect(int v)
    {
        time[v] = index;
        low[v] = index;

        index++;
        stack.Push(v);
        onStack[v] = true;

        foreach (var edge in graph.GetNode(v).EdgeList)
        {
            if (time[edge.DestinationId] == null)
            {
                StrongConnect(edge.DestinationId);
                low[v] = Math.Min(low[edge.DestinationId], low[v]);
            }
            else if (onStack[edge.DestinationId])
            {
                low[v] = Math.Min(low[v], time[edge.DestinationId].Value);
            }
            else
            {

            }
        }

        if (low[v] == time[v])
        {
            var SSC = new List&lt;Node&lt;string&gt;&gt;();

            while (stack.Any())
            {
                var id = stack.Pop();

                var node = graph.GetNode(id);
                SSC.Add(node);
                onStack[id] = false;

                if (id == v)
                    break;
            }
            SSCs.Add(SSC);
        }
    }
}
</code>
                </pre>
            </div>
        </div>
    </div>
    <div class="col-md-9 cyContainer">
        <div class="row">
            <div id="cy" class="cyGraph">

            </div>
        </div>
        <div class="row">
            <div class="col-md-1">
                <h1>@ResManager.GetResource("Head")</h1>
            </div>
            <div class="col-md-10">
                <div id="cy" class="cyQueue" style="height: 100px;">
                </div>
            </div>
            <div class="col-md-1">
                <h1>@ResManager.GetResource("Tail")</h1>
            </div>
        </div>
    </div>

</div>
<br />
<div class="row">
    <div class="col-md-offset-3 col-md-9">
        @Html.Partial("_Player")
    </div>

</div>


@section scripts{
    <script src="~/Scripts/PageScripts/TarjanDFS.js"></script>
}